// Code generated by MockGen. DO NOT EDIT.
// Source: uc_user.go
//
// Generated by this command:
//
//	mockgen -source=uc_user.go -destination=mocks/uc_user_mock.go
//
// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/Kotletta-TT/bonus-service/internal/app/loyalty/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserManagmentUseCase is a mock of UserManagmentUseCase interface.
type MockUserManagmentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagmentUseCaseMockRecorder
}

// MockUserManagmentUseCaseMockRecorder is the mock recorder for MockUserManagmentUseCase.
type MockUserManagmentUseCaseMockRecorder struct {
	mock *MockUserManagmentUseCase
}

// NewMockUserManagmentUseCase creates a new mock instance.
func NewMockUserManagmentUseCase(ctrl *gomock.Controller) *MockUserManagmentUseCase {
	mock := &MockUserManagmentUseCase{ctrl: ctrl}
	mock.recorder = &MockUserManagmentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagmentUseCase) EXPECT() *MockUserManagmentUseCaseMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockUserManagmentUseCase) LoginUser(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserManagmentUseCaseMockRecorder) LoginUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserManagmentUseCase)(nil).LoginUser), ctx, login, password)
}

// RegisterUser mocks base method.
func (m *MockUserManagmentUseCase) RegisterUser(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserManagmentUseCaseMockRecorder) RegisterUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserManagmentUseCase)(nil).RegisterUser), ctx, login, password)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepo) AddUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepoMockRecorder) AddUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepo)(nil).AddUser), ctx, user)
}

// GetUserByLogin mocks base method.
func (m *MockUserRepo) GetUserByLogin(ctx context.Context, login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserRepoMockRecorder) GetUserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserRepo)(nil).GetUserByLogin), ctx, login)
}
