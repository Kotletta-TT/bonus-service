// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/loyalty/utils/auth_utils.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/loyalty/utils/auth_utils.go -destination=internal/app/loyalty/utils/mocks/auth_utils_mocks.go
//
// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPassworder is a mock of Passworder interface.
type MockPassworder struct {
	ctrl     *gomock.Controller
	recorder *MockPassworderMockRecorder
}

// MockPassworderMockRecorder is the mock recorder for MockPassworder.
type MockPassworderMockRecorder struct {
	mock *MockPassworder
}

// NewMockPassworder creates a new mock instance.
func NewMockPassworder(ctrl *gomock.Controller) *MockPassworder {
	mock := &MockPassworder{ctrl: ctrl}
	mock.recorder = &MockPassworderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassworder) EXPECT() *MockPassworderMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPassworder) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPassworderMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPassworder)(nil).Hash), password)
}

// Verify mocks base method.
func (m *MockPassworder) Verify(password, hashedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", password, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPassworderMockRecorder) Verify(password, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPassworder)(nil).Verify), password, hashedPassword)
}
